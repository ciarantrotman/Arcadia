//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/controls/PlayerControls_One.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls_One: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls_One()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls_One"",
    ""maps"": [
        {
            ""name"": ""simple_player_movement"",
            ""id"": ""d0ba44ad-bb56-45ba-9dd4-74129f771f45"",
            ""actions"": [
                {
                    ""name"": ""horizontal_movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5b99cfc7-ed50-4843-9197-b0f4b4e8af81"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e530c8e6-ee67-4cd3-af17-5294612b5ed2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66449eda-ac3b-492d-996c-b6145ad6e5ae"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad-scheme"",
                    ""action"": ""horizontal_movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""010732d0-bb89-4703-87d3-acec05cf1b66"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""horizontal_movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c3eaeb7c-3ccc-49f4-8d07-7259c52cabc4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""horizontal_movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a03bd082-aef9-41ba-bf13-8721ba4bc8fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""horizontal_movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""78054225-0867-484b-82b4-46e6ca695adf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""horizontal_movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6dbe77a6-ef76-4756-9731-a5dc3f1518f2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""horizontal_movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1b954ad4-5d6c-460c-8ce2-a5231baae745"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""gamepad-scheme"",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6de97ad3-d257-49ca-8480-4efe395397e9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2636ffb6-09f3-45d2-88f4-a19fd653e0e7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f6b13a48-cce9-4f28-a12a-053545f9ea37"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bca7a565-d778-4700-8fae-4df61d974b06"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""34166a0a-fb80-44e8-a6e4-26298722f7b3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard-scheme"",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""gamepad-scheme"",
            ""bindingGroup"": ""gamepad-scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""keyboard-scheme"",
            ""bindingGroup"": ""keyboard-scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // simple_player_movement
        m_simple_player_movement = asset.FindActionMap("simple_player_movement", throwIfNotFound: true);
        m_simple_player_movement_horizontal_movement = m_simple_player_movement.FindAction("horizontal_movement", throwIfNotFound: true);
        m_simple_player_movement_rotation = m_simple_player_movement.FindAction("rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // simple_player_movement
    private readonly InputActionMap m_simple_player_movement;
    private List<ISimple_player_movementActions> m_Simple_player_movementActionsCallbackInterfaces = new List<ISimple_player_movementActions>();
    private readonly InputAction m_simple_player_movement_horizontal_movement;
    private readonly InputAction m_simple_player_movement_rotation;
    public struct Simple_player_movementActions
    {
        private @PlayerControls_One m_Wrapper;
        public Simple_player_movementActions(@PlayerControls_One wrapper) { m_Wrapper = wrapper; }
        public InputAction @horizontal_movement => m_Wrapper.m_simple_player_movement_horizontal_movement;
        public InputAction @rotation => m_Wrapper.m_simple_player_movement_rotation;
        public InputActionMap Get() { return m_Wrapper.m_simple_player_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Simple_player_movementActions set) { return set.Get(); }
        public void AddCallbacks(ISimple_player_movementActions instance)
        {
            if (instance == null || m_Wrapper.m_Simple_player_movementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Simple_player_movementActionsCallbackInterfaces.Add(instance);
            @horizontal_movement.started += instance.OnHorizontal_movement;
            @horizontal_movement.performed += instance.OnHorizontal_movement;
            @horizontal_movement.canceled += instance.OnHorizontal_movement;
            @rotation.started += instance.OnRotation;
            @rotation.performed += instance.OnRotation;
            @rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(ISimple_player_movementActions instance)
        {
            @horizontal_movement.started -= instance.OnHorizontal_movement;
            @horizontal_movement.performed -= instance.OnHorizontal_movement;
            @horizontal_movement.canceled -= instance.OnHorizontal_movement;
            @rotation.started -= instance.OnRotation;
            @rotation.performed -= instance.OnRotation;
            @rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(ISimple_player_movementActions instance)
        {
            if (m_Wrapper.m_Simple_player_movementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISimple_player_movementActions instance)
        {
            foreach (var item in m_Wrapper.m_Simple_player_movementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Simple_player_movementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Simple_player_movementActions @simple_player_movement => new Simple_player_movementActions(this);
    private int m_gamepadschemeSchemeIndex = -1;
    public InputControlScheme gamepadschemeScheme
    {
        get
        {
            if (m_gamepadschemeSchemeIndex == -1) m_gamepadschemeSchemeIndex = asset.FindControlSchemeIndex("gamepad-scheme");
            return asset.controlSchemes[m_gamepadschemeSchemeIndex];
        }
    }
    private int m_keyboardschemeSchemeIndex = -1;
    public InputControlScheme keyboardschemeScheme
    {
        get
        {
            if (m_keyboardschemeSchemeIndex == -1) m_keyboardschemeSchemeIndex = asset.FindControlSchemeIndex("keyboard-scheme");
            return asset.controlSchemes[m_keyboardschemeSchemeIndex];
        }
    }
    public interface ISimple_player_movementActions
    {
        void OnHorizontal_movement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
